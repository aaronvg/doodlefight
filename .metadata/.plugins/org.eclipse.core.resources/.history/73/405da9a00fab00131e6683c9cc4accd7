package entities;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.maps.MapProperties;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;

public class GameCamera extends OrthographicCamera {
	
	float initialZoom;
	Vector3 startPos;
	public GameCamera(float x, float y, TiledMap map) {
		super(x, y);
		MapProperties prop = map.getProperties();

		int mapWidth = prop.get("width", Integer.class);
		int mapHeight = prop.get("height", Integer.class);
		int tilePixelWidth = prop.get("tilewidth", Integer.class);
		int tilePixelHeight = prop.get("tileheight", Integer.class);

		int mapPixelWidth = mapWidth * tilePixelWidth;
		int mapPixelHeight = mapHeight * tilePixelHeight;
		
		Vector3 pos = new Vector3(mapWidth, mapHeight, 1);
		//unproject(pos);
		startPos = new Vector3(position);
		position.x = pos.x/2; // we go half the frustum width

		
		
		this.
		initialZoom = this.zoom;
		Gdx.app.log("cam", "width " + this.viewportWidth + " x " + pos.x);
		this.zoom = 2f;
		update();
		Gdx.app.log("cam", "width " + this.viewportWidth);
		
		
		
	}
	
	public void init() {
		
		
		
	}
	
	@Override
	public void update() {

		super.update();
		float lerp = 0.95f;
		Vector3 pos = this.position;
		
		pos.x += (startPos.x - pos.x) * .95f;
		pos.y += (startPos.y - pos.y) * .95f;
		
		zoom = (initialZoom - zoom) * .80f;
		
		
		
	}
	
}
